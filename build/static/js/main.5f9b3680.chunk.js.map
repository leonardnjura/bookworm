{"version":3,"sources":["assets/logo.png","components/BookItem.js","components/BookKey.js","components/Books.js","components/Book.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BookItem","props","console","log","book","id","name","author","madeInKenya","coverUrl","className","classNames","to","src","alt","style","width","float","borderRadius","BookKey","BOOKS_QUERY","gql","Books","query","loading","error","data","books","map","key","Component","BOOK_QUERY","Book","this","match","params","parseInt","variables","bookTitle","publishedAt","isbn","format","pages","authorName","display","margin","client","ApolloClient","uri","App","logo","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f9b3680.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d024f191.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nexport default function BookItem(props) {\n  console.log(props.book);\n  const { id, name, author, madeInKenya, coverUrl } = props.book;\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            <span\n              className={classNames({\n                'bg-success': madeInKenya,\n                'bg-danger': !madeInKenya,\n                'px-1 mr-2': true\n              })}\n            ></span>\n            Book: {name}\n          </h4>\n          <h1 className=\"author\">By {author.name}</h1>\n          <Link to={`/book/${id}`} className=\"btn btn-secondary  mb-2\">\n            Book Details\n          </Link>\n        </div>\n        <div className=\"col-md-3\">\n          <img\n            src={coverUrl}\n            alt=\"Book Cover\"\n            style={{ width: 30, float: 'right', borderRadius: 3 }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function BookKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> Local \n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> International \n      </p>\n    </div>\n  );\n}\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport BookItem from './BookItem';\nimport BookKey from './BookKey';\n\nconst BOOKS_QUERY = gql`\n  query BooksQuery {\n    books {\n      id\n      name\n      authorId\n      author {\n        name\n      }\n      madeInKenya\n      publishedAt\n      coverUrl\n    }\n  }\n`;\n\nexport class Books extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h4 className=\"display-4 my-3\">Books</h4>\n        <p>Checkout these awesome books from my collection!</p>\n        <BookKey />\n        <Query query={BOOKS_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading..</h4>;\n            if (error) console.log(error);\n\n            // console.log(data)\n            return (\n              <Fragment>\n                {data.books.map(book => (\n                  <BookItem key={book.id} book={book} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n        <hr className=\"mb-5\" />\n      </Fragment>\n    );\n  }\n}\n\nexport default Books;\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\n\nconst BOOK_QUERY = gql`\n  query BookQuery($id: Int!) {\n    book(id: $id) {\n      name\n      author {\n        name\n      }\n      madeInKenya\n      publishedAt\n      isbn\n      format\n      coverUrl\n      pages\n    }\n  }\n`;\n\nexport class Book extends Component {\n  render() {\n    // console.log(this.props);\n    let { id } = this.props.match.params;\n    id = parseInt(id);\n    return (\n      <Fragment>\n        {/* <h4 className=\"display-4 my-3\">Book</h4>\n        <p>Discover more about this book!</p> */}\n        <Query query={BOOK_QUERY} variables={{ id }}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading Book..</h4>;\n            if (error) console.log(error);\n\n            const bookTitle = data.book.name;\n            const {\n              madeInKenya,\n              publishedAt,\n              isbn,\n              format,\n              coverUrl,\n              pages\n            } = data.book;\n            const authorName = data.book.author.name;\n\n            console.log(data);\n            return (\n              <div>\n                <Link to=\"/\" className=\"btn btn-secondary mt-2\">\n                  Back\n                </Link>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-dark\">{bookTitle}</span>\n                </h1>\n\n                <div className=\"row\">\n                  <div className=\"col-md-9\">\n                    {/* <h4>Book Details:</h4> */}\n                    <ul className=\"list-group mb-3\">\n                      <li className=\"list-group-item\">Author: {authorName}</li>\n                      <li className=\"list-group-item\">\n                        Published: <Moment format=\"YYYY\">{publishedAt}</Moment>\n                      </li>\n                      <li className=\"list-group-item\">ISBN: {isbn}</li>\n                      <li className=\"list-group-item\">Format: {format}</li>\n                      <li className=\"list-group-item\">Pages: {pages}</li>\n                      <li className=\"list-group-item\">\n                        Made in Kenya:{' '}\n                        <span\n                          className={classNames({\n                            'text-success': madeInKenya,\n                            'text-danger': !madeInKenya\n                          })}\n                        >\n                          {madeInKenya ? 'Yes' : 'No'}\n                        </span>\n                      </li>\n                    </ul>\n                  </div>\n                  <div className=\"col-md-3\">\n                    <img\n                      src={coverUrl}\n                      alt=\"Book Cover\"\n                      style={{\n                        width: 230,\n                        display: 'block',\n                        margin: 'auto',\n                        borderRadius: 5\n                      }}\n                    />\n\n                    <hr className=\"mb-5\" />\n                  </div>\n                </div>\n              </div>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Book;\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Books from './components/Books';\nimport Book from './components/Book';\n\nimport './App.css';\nimport logo from './assets/logo.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img\n            src={logo}\n            style={{ width: 230, display: 'block', margin: 'auto' }}\n          />\n          {/* <Books /> */}\n          <Route exact path=\"/\" component={Books} />\n          <Route exact path=\"/book/:id\" component={Book} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}